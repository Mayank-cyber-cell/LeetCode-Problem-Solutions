#include <stdlib.h>

typedef struct {
    int key;   // the number
    int value; // stored index + 1 (0 means empty)
} HashNode;

static int hash(int key, int size) {
    return (key % size + size) % size;
}

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int size = numsSize * 2 + 1; // make table a bit larger
    HashNode* table = (HashNode*)calloc(size, sizeof(HashNode));
    int* result = (int*)malloc(2 * sizeof(int));
    *returnSize = 2;

    for (int i = 0; i < numsSize; i++) {
        int complement = target - nums[i];
        int h = hash(complement, size);

        while (table[h].value != 0) {
            if (table[h].key == complement) {
                result[0] = table[h].value - 1; 
                result[1] = i;
                free(table);
                return result;
            }
            h = (h + 1) % size;
        }
        int idx = hash(nums[i], size);
        while (table[idx].value != 0) idx = (idx + 1) % size;
        table[idx].key = nums[i];
        table[idx].value = i + 1; 
    }

    free(table);
    return NULL;
}
